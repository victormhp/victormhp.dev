---
import Icon from "./Icon.astro";
import { iconLinks } from "../config/socials";

const textLinks: { label: string; href: string }[] = [
  { label: "Home", href: "#home" },
  { label: "About", href: "#about" },
  { label: "Work", href: "#work" },
  { label: "Contact", href: "#contact" },
  { label: "Resume", href: "#contact" },
];

const isLastTextLink = (link: string) => {
  const lastTextLink = textLinks[textLinks.length - 1].label;

  if (link === lastTextLink) {
    return "resume";
  }
  return "link";
};
---

<nav>
  <div class="menu-header">
    <a href="/" class="site-title">
      <Icon icon="terminal-window" color="var(--accent-dark)" size="1.6em" />
       Victor.dev
    </a>
    <menu-button>
      <template>
        <button class="menu-button">
          <span class="sr-only">Menu</span>
          <Icon icon="list" />
        </button>
      </template>
    </menu-button>
  </div>
  <noscript>
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li class="link-wrapper">
            <a class="link" href={href}>
              {label}
            </a>
          </li>
        ))
      }
    </ul>
  </noscript>
  <noscript>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} target="_blank" class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>
    </div>
  </noscript>
  <div class="menu-content">
    <ul class="nav-items">
      {
        textLinks.map(({ label, href }) => (
          <li>
            <a class={isLastTextLink(label)} href={href}>
              {label}
            </a>
          </li>
        ))
      }
    </ul>
    <div class="menu-footer">
      <div class="socials">
        {
          iconLinks.map(({ href, icon, label }) => (
            <a href={href} target="_blank" class="social">
              <span class="sr-only">{label}</span>
              <Icon icon={icon} />
            </a>
          ))
        }
      </div>
    </div>
  </div>
</nav>

<script>
  class MenuButton extends HTMLElement {
    constructor() {
      super();

      // Inject menu toggle button when JS runs.
      this.appendChild(this.querySelector("template")!.content.cloneNode(true));
      const btn = this.querySelector("button")!;

      const body = document.body;
      const menu = document.querySelector(".menu-content");
      const navLinks = document.querySelectorAll(".link");

      const setExpanded = () => {
        btn.toggleAttribute("aria-expanded");
        menu.classList.toggle("menu-open");

        body.toggleAttribute("data-menu-open");
      };

      btn.addEventListener("click", () => setExpanded());

      navLinks.forEach((link) => {
        link.addEventListener("click", () => {
          if (menu.classList.contains("menu-open")) {
            setExpanded();
          }
        });
      });
    }
  }

  customElements.define("menu-button", MenuButton);
</script>

<style>
  :global(body[data-menu-open]) {
    overflow-y: hidden;
  }

  nav {
    position: fixed;
    left: 0;
    right: 0;
    z-index: 9999;
    margin: 0 auto;
    padding: 0.5rem 0rem;
    background-color: var(--bg-color);
    box-shadow: var(--shadow-nav);
    font-family: var(--font-brand);
    font-weight: 500;
  }

  .menu-header {
    display: flex;
    justify-content: space-between;
    gap: 0.5rem;
    padding: 0.5rem 1.5rem;
  }

  .site-title {
    display: flex;
    gap: 0.5rem;
    align-items: center;
    font-size: var(--text-lg);
    font-weight: 600;
    color: var(--gray-900);
  }

  .menu-button {
    position: relative;
    z-index: 9999;
    display: flex;
    border: 0;
    padding: 0.5rem;
    font-size: 1.5rem;
    background-color: transparent;
  }

  .menu-button[aria-expanded] {
    color: var(--accent-dark);
  }

  .menu-content {
    position: fixed;
    width: 100vw;
    height: 100vh;
    z-index: 100;
    top: 0;
    left: 0;
    display: flex;
    flex-direction: column;
    background-color: var(--bg-color);
    transform: translate(-100%);
    transition: transform 300ms ease-in-out;
  }

  .menu-open {
    transform: translate(0);
  }

  .nav-items {
    margin: 0;
    display: flex;
    flex: 1;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 2.5rem;
    font-size: var(--text-xl);
    line-height: 1.2;
    list-style: none;
    padding: 2rem;
  }

  .link {
    color: var(--gray-800);
  }

  .resume {
    border-radius: 0.25rem;
    border: 2px solid var(--gray-800);
    padding: 0.5rem 1rem;
    background-color: var(--accent-light);
    color: var(--gray-800);
    box-shadow:
      0.5px 1px 0 0 var(--gray-800),
      1.5px 2px 0 0 var(--gray-800),
      2.5px 3px 0 0 var(--gray-800),
      3.5px 4px 0 0 var(--gray-800),
      4.5px 5px 0 0 var(--gray-800),
      5.5px 6px 0 0 var(--gray-800);
    position: relative;
    top: 0;
    left: 0;
    transform: rotateX(0) rotateY(0) rotateZ(0);
    transition: all var(--theme-transition);
    cursor: pointer;
    display: inline-block;
    outline: 2px dashed transparent;
    position: relative;
  }

  .resume:hover {
    background-color: var(--accent-regular);
    box-shadow:
      0 0 0 0 var(--black-200),
      0 0 0 0 var(--black-200),
      0 0 0 0 var(--black-200),
      0 0 0 0 var(--black-200),
      0 0 0 0 var(--black-200),
      0 0 0 0 var(--black-200);
    top: 6px;
    left: 5.5px;
    transform: rotateX(5deg) rotateY(3deg) rotateZ(0.25deg);
  }

  .resume:focus-visible {
    --background: var(--bg-color);

    box-shadow:
      0 0 0 0 var(--gray-800),
      0 0 0 0 var(--gray-800),
      0 0 0 0 var(--gray-800),
      0 0 0 0 var(--gray-800),
      0 0 0 0 var(--gray-800),
      0 0 0 0 var(--gray-800),
      0 0 0 0 var(--gray-800),
      0 0 0 2px var(--background),
      0 0 0 4px var(--gray-800);
    outline: none;
  }

  .menu-footer {
    display: flex;
    justify-content: space-between;
    gap: 0.75rem;
    padding: 1.5rem 2rem;
    background-color: var(--bg-color);
    box-shadow: var(--shadow-footer);
    border-radius: 0 0 0.75rem 0.75rem;
  }

  .socials {
    display: flex;
    gap: 0.75rem;
    font-size: var(--text-2xl);
  }

  .social {
    display: flex;
    padding: 0.5rem;
    color: var(--gray-800);
    transition: color var(--theme-transition);
  }

  @media (min-width: 50em) {
    nav {
      display: flex;
      justify-content: space-between;
      align-items: center;
      gap: 1rem;
      padding: 0.75rem 3rem;
    }

    .menu-header {
      padding: 0;
    }

    .menu-button {
      display: none;
    }

    .menu-content {
      display: contents;
    }

    .nav-items {
      flex-direction: row;
      justify-content: end;
      font-size: var(--text-md);
      border: 0;
      padding: 0.5rem 0.5625rem;
    }

    .link {
      position: relative;
      top: 0;
      transition:
        top 0.35s,
        padding 0.5s,
        box-shadow 0.4s,
        border 0.15s;
      border-bottom: 0.1rem solid transparent;
      box-shadow: 0 0 0 0 var(--accent-regular);
    }

    .link:is(:hover, :focus) {
      top: -0.35rem;
      padding-bottom: 0.35rem;
      border-bottom: 0.2rem solid var(--accent-dark);
      box-shadow: 0 0.4rem 0 -0.2rem var(--accent-regular);
    }

    .menu-footer {
      display: none;
    }
  }
</style>
